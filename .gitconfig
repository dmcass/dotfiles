[alias]

    # View GPG signature status, abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=format:'%C(magenta)%G? %C(auto)%h %d %s' -n 20 --graph --abbrev-commit

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    lo = log --pretty=oneline -n 20 --graph --abrev-commit

    # View the current working tree status using the short format.
    s = status -s

    # Full status.
    st = status

    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Clone a repository including all submodules.
    c = clone --recursive

    # Commit all changes.
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary.
    go = "!f() { git switch -c \"$1\" 2> /dev/null || git switch \"$1\"; }; f"

    # Shorthand command for checkout. Warns about using checkout instead of switch.
    co = "!f() { git checkout \"$@\"; echo \"\n $(tput setaf 1)Should you be using 'switch' or 'restore' instead?\"; }; f"

    # Shorthand command for switch.
    sw = switch

    # Show verbose output about tags, branches or remotes.
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # List aliases.
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit.
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit.
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code.
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message.
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[apply]

    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[core]

    # Use custom `.gitignore` and `.gitattributes`.
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustCtime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeUnicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    # Recommended pager config
    pager = less -FMRiX

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = cyan reverse
    local = green
    remote = yellow

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = green
    changed = yellow
    untracked = cyan

[commit]

    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgSign = true

[diff]

    # Detect copies as well as renames.
    renames = copies

[diff "bin"]

    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages.
    log = true

    # Default to creating a merge commit when merging branches
    ff = no

[fetch]

    # Always prune branches and tags that have been deleted on remotes.
    prune = true

[pull]

    # Set default pull strategy to rebase local branch on top of remote changes.
    rebase = true

    # Prefer fast-forward merges when pulling with merge strategy
    ff = yes

[push]

    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[gpg]

    program = /opt/homebrew/bin/gpg

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

[init]

    defaultBranch = main
