#!/usr/bin/env bash

# Shell prompt based on the Tomorrow Night theme.
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return;

    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    # Early exit for Chromium & Blink repo, as the dirty check takes too long.
    # Thanks, @paulirish!
    # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
    repoUrl="$(git config --get remote.origin.url)";
    if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
        s+='*';
    else
        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+';
        fi;
        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!';
        fi;
        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            s+='?';
        fi;
        # Check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$';
        fi;
    fi;

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${2}${s}";
}

if [[ $COLORTERM =~ ^(truecolor|24bit)$ ]]; then
    reset="\e[0m";
    bold="\e[1m";
    # Base16 Tomorrow Night
    base00="\e[38;2;29;31;33m";
    base01="\e[38;2;40;42;46m";
    base02="\e[38;2;55;59;65m";
    base03="\e[38;2;150;152;150m";
    base04="\e[38;2;180;183;180m";
    base05="\e[38;2;197;200;198m";
    base06="\e[38;2;224;224;224m";
    base07="\e[38;2;255;255;255m";
    base08="\e[38;2;204;102;102m";
    base09="\e[38;2;222;147;95m";
    base0A="\e[38;2;240;198;116m";
    base0B="\e[38;2;181;189;104m";
    base0C="\e[38;2;138;190;183m";
    base0D="\e[38;2;129;162;190m";
    base0E="\e[38;2;178;148;187m";
    base0F="\e[38;2;163;104;90m";

    black="$base00";
    red="$base08";
    orange="$base09";
    yellow="$base0A";
    green="$base0B";
    cyan="$base0C";
    blue="$base0D";
    purple="$base0E";
    brown="$base0F";
    white="$base07";
elif tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    black=$(tput setaf 0);
    red=$(tput setaf 1);
    orange=$(tput setaf 9);
    yellow=$(tput setaf 3);
    green=$(tput setaf 2);
    cyan=$(tput setaf 6);
    blue=$(tput setaf 4);
    purple=$(tput setaf 5);
    brown=$(tput setaf 14);
    white=$(tput setaf 15);
else
    bold="\e[1m";
    reset="\e[0m";
    black="\e[30m";
    red="\e[31m";
    orange="\e[91m";
    yellow="\e[33m";
    green="\e[32m";
    cyan="\e[36m";
    blue="\e[34m";
    purple="\e[35m";
    brown="\e[96m;"
    white="\e[37m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${purple}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
